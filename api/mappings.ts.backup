import { createClient } from '@supabase/supabase-js';
import type { VercelRequest, VercelResponse } from '@vercel/node';

// Initialize Supabase client
const supabaseUrl = process.env.SUPABASE_URL!;
const supabaseKey = process.env.SUPABASE_ANON_KEY!;
const supabase = createClient(supabaseUrl, supabaseKey);

// Helper function to decode JWT and extract user ID
function decodeJWT(token: string): { userId: string } | null {
  try {
    const parts = token.split('.');
    if (parts.length !== 3) {
      return { userId: token };
    }
    
    const payload = JSON.parse(atob(parts[1]));
    const userId = payload.sub || payload.user_id || payload.id;
    
    if (!userId) {
      console.error('No user ID found in JWT payload:', payload);
      return null;
    }
    
    return { userId };
  } catch (error) {
    console.error('Error decoding JWT:', error);
    return { userId: token };
  }
}

export default async function handler(req: VercelRequest, res: VercelResponse) {
  // CORS headers
  const origin = req.headers.origin as string;
  const isAllowedOrigin = origin && (
    origin === 'https://www.commandless.app' ||
    origin === 'https://commandless.app' ||
    origin === 'http://localhost:5173' ||
    origin.endsWith('.vercel.app')
  );
  
  if (isAllowedOrigin) {
    res.setHeader('Access-Control-Allow-Origin', origin);
  } else {
    res.setHeader('Access-Control-Allow-Origin', '*');
  }
  
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');
  
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  const authHeader = req.headers.authorization;
  
  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    return res.status(401).json({ error: 'Unauthorized' });
  }

  const token = authHeader.split(' ')[1];
  const decodedToken = decodeJWT(token);
  
  if (!decodedToken) {
    return res.status(401).json({ error: 'Invalid token' });
  }
  
  const userId = decodedToken.userId;

  console.log('üîç Mappings API Debug:', {
    userId: userId,
    method: req.method,
    query: req.query
  });

  try {
    // Ensure user exists in database
    const { data: existingUser, error: userError } = await supabase
      .from('users')
      .select('id')
      .eq('id', userId)
      .maybeSingle();

    if (userError && userError.code !== 'PGRST116') {
      console.error('User check error:', userError);
      return res.status(500).json({ error: 'User verification failed' });
    }

    if (!existingUser) {
      console.log('Creating new user record for:', userId);
      const { error: createError } = await supabase
        .from('users')
        .insert({
          id: userId,
          username: userId,
          name: userId,
          role: 'user'
        });
      if (createError) {
        console.error('Failed to create user:', createError);
        return res.status(500).json({ error: 'Failed to create user record' });
      }
    }

    if (req.method === 'GET') {
      // Check if this is a request for a specific mapping via query parameter
      const { id: specificMappingId } = req.query;
      
      if (specificMappingId) {
        console.log('üîç Individual mapping request:', {
          mappingId: specificMappingId,
          userId: userId
        });

        // Get specific mapping
        const { data: mapping, error } = await supabase
          .from('command_mappings')
          .select('id, user_id, bot_id, name, natural_language_pattern, command_output, status, usage_count, created_at')
          .eq('id', specificMappingId)
          .eq('user_id', userId)
          .single();

        if (error || !mapping) {
          console.log('üîç Mapping not found:', { error, mappingId: specificMappingId });
          return res.status(404).json({ error: 'Mapping not found' });
        }

        // Get bot information
        const { data: bot } = await supabase
          .from('bots')
          .select('id, bot_name, platform_type, personality_context')
          .eq('id', mapping.bot_id)
          .single();

        const response = {
          id: mapping.id,
          botId: mapping.bot_id,
          name: mapping.name,
          naturalLanguagePattern: mapping.natural_language_pattern,
          commandOutput: mapping.command_output,
          personalityContext: bot?.personality_context || null,
          status: mapping.status,
          usageCount: mapping.usage_count,
          createdAt: mapping.created_at,
          bot: bot ? {
            id: bot.id,
            name: bot.bot_name,
            platformType: bot.platform_type
          } : null
        };

        return res.status(200).json(response);
      }

      // Get all command mappings for the user
      console.log('üîç Getting mappings for user:', userId);
      
      const { data: mappings, error } = await supabase
        .from('command_mappings')
        .select('id, bot_id, name, natural_language_pattern, command_output, status, usage_count, created_at')
        .eq('user_id', userId)
        .order('created_at', { ascending: false });

      console.log('üîç Mappings query result:', {
        count: mappings?.length || 0,
        error: error?.message
      });

      if (error) {
        console.error('Mappings query error:', error);
        return res.status(500).json({ error: 'Failed to fetch mappings' });
      }

      // Get bot information for each mapping
      const mappingsWithBots = await Promise.all(
        (mappings || []).map(async (mapping: any) => {
          const { data: bot } = await supabase
            .from('bots')
            .select('id, bot_name, platform_type, is_connected')
            .eq('id', mapping.bot_id)
            .single();

          return {
            id: mapping.id,
            botId: mapping.bot_id,
            name: mapping.name,
            naturalLanguagePattern: mapping.natural_language_pattern,
            commandOutput: mapping.command_output,
            status: mapping.status,
            usageCount: mapping.usage_count,
            createdAt: mapping.created_at,
            bot: bot ? {
              id: bot.id,
              botName: bot.bot_name,
              platformType: bot.platform_type,
              isConnected: bot.is_connected
            } : null
          };
        })
      );

      console.log('üîç Returning mappings:', mappingsWithBots.length);
      return res.status(200).json(mappingsWithBots);
    }

    if (req.method === 'POST') {
      const { botId, name, naturalLanguagePattern, commandOutput, status = 'active' } = req.body;
      
      if (!botId || !name || !naturalLanguagePattern || !commandOutput) {
        return res.status(400).json({ error: 'Missing required fields' });
      }

      // Verify bot exists and belongs to user
      const { data: bot, error: botError } = await supabase
        .from('bots')
        .select('*')
        .eq('id', botId)
        .eq('user_id', userId)
        .single();

      if (botError || !bot) {
        return res.status(404).json({ error: 'Bot not found or access denied' });
      }

      const { data: newMapping, error } = await supabase
        .from('command_mappings')
        .insert({
          user_id: userId,
          bot_id: botId,
          name: name,
          natural_language_pattern: naturalLanguagePattern,
          command_output: commandOutput,
          status: status
        })
        .select('*')
        .single();

      if (error) {
        console.error('Create mapping error:', error);
        return res.status(500).json({ error: 'Failed to create mapping' });
      }

      return res.status(201).json({
        id: newMapping.id,
        botId: newMapping.bot_id,
        name: newMapping.name,
        naturalLanguagePattern: newMapping.natural_language_pattern,
        commandOutput: newMapping.command_output,
        status: newMapping.status,
        usageCount: newMapping.usage_count,
        createdAt: newMapping.created_at
      });
    }

    return res.status(405).json({ error: 'Method not allowed' });

  } catch (error) {
    console.error('Mappings API error:', error);
    return res.status(500).json({ 
      error: 'Internal server error',
      message: error instanceof Error ? error.message : 'Unknown error'
    });
  }
}
